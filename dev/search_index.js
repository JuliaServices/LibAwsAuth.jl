var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LibAwsAuth","category":"page"},{"location":"#LibAwsAuth","page":"Home","title":"LibAwsAuth","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LibAwsAuth.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LibAwsAuth]","category":"page"},{"location":"#LibAwsAuth.AWS_C_AUTH_PACKAGE_ID","page":"Home","title":"LibAwsAuth.AWS_C_AUTH_PACKAGE_ID","text":"Documentation not found.\n\n\n\n\n\n","category":"constant"},{"location":"#LibAwsAuth.__JL_Ctag_285","page":"Home","title":"LibAwsAuth.__JL_Ctag_285","text":"__JL_Ctag_285\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_auth_errors","page":"Home","title":"LibAwsAuth.aws_auth_errors","text":"aws_auth_errors\n\nAuth-specific error codes\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_auth_http_system_vtable","page":"Home","title":"LibAwsAuth.aws_auth_http_system_vtable","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_auth_log_subject","page":"Home","title":"LibAwsAuth.aws_auth_log_subject","text":"aws_auth_log_subject\n\nAuth-specific logging subjects\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_cognito_identity_provider_token_pair","page":"Home","title":"LibAwsAuth.aws_cognito_identity_provider_token_pair","text":"aws_cognito_identity_provider_token_pair\n\nA (string) pair defining an identity provider and a valid login token sourced from it.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials","page":"Home","title":"LibAwsAuth.aws_credentials","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider","page":"Home","title":"LibAwsAuth.aws_credentials_provider","text":"aws_credentials_provider\n\nA baseclass for credentials providers. A credentials provider is an object that has an asynchronous query function for retrieving AWS credentials.\n\nRef-counted. Thread-safe.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_cached_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_cached_options","text":"aws_credentials_provider_cached_options\n\nConfiguration options for a provider that functions as a caching decorator. Credentials sourced through this provider will be cached within it until their expiration time. When the cached credentials expire, new credentials will be fetched when next queried.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_chain_default_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_chain_default_options","text":"aws_credentials_provider_chain_default_options\n\nConfiguration options for the default credentials provider chain.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_chain_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_chain_options","text":"aws_credentials_provider_chain_options\n\nConfiguration options for a provider that queries, in order, a list of providers. This provider uses the first set of credentials successfully queried. Providers are queried one at a time; a provider is not queried until the preceding provider has failed to source credentials.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_cognito_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_cognito_options","text":"aws_credentials_provider_cognito_options\n\nConfiguration options needed to create a Cognito-based Credentials Provider\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_delegate_get_credentials_fn","page":"Home","title":"LibAwsAuth.aws_credentials_provider_delegate_get_credentials_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_delegate_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_delegate_options","text":"aws_credentials_provider_delegate_options\n\nConfiguration options for the delegate credentials provider.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_destroy_fn","page":"Home","title":"LibAwsAuth.aws_credentials_provider_destroy_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_ecs_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_ecs_options","text":"aws_credentials_provider_ecs_options\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_environment_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_environment_options","text":"aws_credentials_provider_environment_options\n\nConfiguration options for a provider that returns credentials based on environment variable values\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_get_credentials_fn","page":"Home","title":"LibAwsAuth.aws_credentials_provider_get_credentials_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_imds_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_imds_options","text":"aws_credentials_provider_imds_options\n\nConfiguration options for the provider that sources credentials from ec2 instance metadata\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_process_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_process_options","text":"aws_credentials_provider_process_options\n\nConfiguration options for the process credentials provider\n\nThe process credentials provider sources credentials from running a command or process. The command to run is sourced from a profile in the AWS config file, using the standard profile selection rules. The profile key the command is read from is \"credential_process.\" E.g.: [default] credential_process=/opt/amazon/bin/my-credential-fetcher –argsA=abc On successfully running the command, the output should be a json data with the following format: { \"Version\": 1, \"AccessKeyId\": \"accesskey\", \"SecretAccessKey\": \"secretAccessKey\" \"SessionToken\": \"....\", \"Expiration\": \"2019-05-29T00:21:43Z\" } Version here identifies the command output format version.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_profile_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_profile_options","text":"aws_credentials_provider_profile_options\n\nConfiguration options for a provider that sources credentials from the aws config and credentials files (by default ~/.aws/config and ~/.aws/credentials)\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_shutdown_completed_fn","page":"Home","title":"LibAwsAuth.aws_credentials_provider_shutdown_completed_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_shutdown_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_shutdown_options","text":"aws_credentials_provider_shutdown_options\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_sso_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_sso_options","text":"aws_credentials_provider_sso_options\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_static_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_static_options","text":"aws_credentials_provider_static_options\n\nConfiguration options for a provider that returns a fixed set of credentials\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_sts_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_sts_options","text":"aws_credentials_provider_sts_options\n\nConfiguration options for the STS credentials provider\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_sts_web_identity_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_sts_web_identity_options","text":"aws_credentials_provider_sts_web_identity_options\n\nConfiguration options for the STS web identity provider\n\nSts with web identity credentials provider sources a set of temporary security credentials for users who have been authenticated in a mobile or web application with a web identity provider. Example providers include Amazon Cognito, Login with Amazon, Facebook, Google, or any OpenID Connect-compatible identity provider like Elastic Kubernetes Service https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html The required parameters used in the request (region, roleArn, sessionName, tokenFilePath) are automatically resolved by SDK from envrionment variables or config file if not set. ––––––––––––––––––––––––––––––––––––––––- | Parameter | Environment Variable Name | Config File Property Name | ––––––––––––––––––––––––––––––––––––––––– | region | AWS_DEFAULT_REGION | region | | role_arn | AWS_ROLE_ARN | role_arn | | role_session_name | AWS_ROLE_SESSION_NAME | role_session_name | | token_file_path | AWS_WEB_IDENTITY_TOKEN_FILE | web_identity_token_file | |––––––––––––––––––––––––––––––––––––––––| The order of resolution is the following 1. Parameters 2. Environment Variables 3. Config File\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_vtable","page":"Home","title":"LibAwsAuth.aws_credentials_provider_vtable","text":"aws_credentials_provider_vtable\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_credentials_provider_x509_options","page":"Home","title":"LibAwsAuth.aws_credentials_provider_x509_options","text":"aws_credentials_provider_x509_options\n\nConfiguration options for the X509 credentials provider\n\nThe x509 credentials provider sources temporary credentials from AWS IoT Core using TLS mutual authentication. See details: https://docs.aws.amazon.com/iot/latest/developerguide/authorizing-direct-aws.html An end to end demo with detailed steps can be found here: https://aws.amazon.com/blogs/security/how-to-eliminate-the-need-for-hardcoded-aws-credentials-in-devices-by-using-the-aws-iot-credentials-provider/\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_client","page":"Home","title":"LibAwsAuth.aws_imds_client","text":"AWS EC2 Metadata Client is used to retrieve AWS EC2 Instance Metadata info.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_client_on_get_array_callback_fn","page":"Home","title":"LibAwsAuth.aws_imds_client_on_get_array_callback_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_client_on_get_credentials_callback_fn","page":"Home","title":"LibAwsAuth.aws_imds_client_on_get_credentials_callback_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_client_on_get_iam_profile_callback_fn","page":"Home","title":"LibAwsAuth.aws_imds_client_on_get_iam_profile_callback_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_client_on_get_instance_info_callback_fn","page":"Home","title":"LibAwsAuth.aws_imds_client_on_get_instance_info_callback_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_client_on_get_resource_callback_fn","page":"Home","title":"LibAwsAuth.aws_imds_client_on_get_resource_callback_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_client_options","page":"Home","title":"LibAwsAuth.aws_imds_client_options","text":"aws_imds_client_options\n\nConfiguration options when creating an imds client\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_client_shutdown_completed_fn","page":"Home","title":"LibAwsAuth.aws_imds_client_shutdown_completed_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_client_shutdown_options","page":"Home","title":"LibAwsAuth.aws_imds_client_shutdown_options","text":"aws_imds_client_shutdown_options\n\nOptional callback and user data to be invoked when an imds client has fully shut down\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_iam_profile","page":"Home","title":"LibAwsAuth.aws_imds_iam_profile","text":"aws_imds_iam_profile\n\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-categories.html\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_instance_info","page":"Home","title":"LibAwsAuth.aws_imds_instance_info","text":"aws_imds_instance_info\n\nBlock of per-instance EC2-specific data\n\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_imds_protocol_version","page":"Home","title":"LibAwsAuth.aws_imds_protocol_version","text":"aws_imds_protocol_version\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_on_get_credentials_callback_fn","page":"Home","title":"LibAwsAuth.aws_on_get_credentials_callback_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_should_sign_header_fn","page":"Home","title":"LibAwsAuth.aws_should_sign_header_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signable","page":"Home","title":"LibAwsAuth.aws_signable","text":"aws_signable\n\nSignable is a generic interface for any kind of object that can be cryptographically signed.\n\nLike signing_result, the signable interface presents\n\n(1) Properties - A set of key-value pairs (2) Property Lists - A set of named key-value pair lists\n\nas well as\n\n(3) A message payload modeled as a stream\n\nWhen creating a signable \"subclass\" the query interface should map to retrieving the properties of the underlying object needed by signing algorithms that can operate on it.\n\nAs an example, if a signable implementation wrapped an http request, you would query request elements like method and uri from the property interface, headers would be queried via the property list interface, and the request body would map to the payload stream.\n\nString constants that map to agreed on keys for particular signable types (\"METHOD\", \"URI\", \"HEADERS\", etc...) are exposed in appropriate header files.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signable_destroy_fn","page":"Home","title":"LibAwsAuth.aws_signable_destroy_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signable_get_payload_stream_fn","page":"Home","title":"LibAwsAuth.aws_signable_get_payload_stream_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signable_get_property_fn","page":"Home","title":"LibAwsAuth.aws_signable_get_property_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signable_get_property_list_fn","page":"Home","title":"LibAwsAuth.aws_signable_get_property_list_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signable_property_list_pair","page":"Home","title":"LibAwsAuth.aws_signable_property_list_pair","text":"aws_signable_property_list_pair\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signable_vtable","page":"Home","title":"LibAwsAuth.aws_signable_vtable","text":"aws_signable_vtable\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signature_type","page":"Home","title":"LibAwsAuth.aws_signature_type","text":"aws_signature_type\n\nWhat sort of signature should be computed from the signable?\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signed_body_header_type","page":"Home","title":"LibAwsAuth.aws_signed_body_header_type","text":"aws_signed_body_header_type\n\nControls if signing adds a header containing the canonical request's body value\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signing_algorithm","page":"Home","title":"LibAwsAuth.aws_signing_algorithm","text":"aws_signing_algorithm\n\nWhat version of the AWS signing process should we use.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signing_complete_fn","page":"Home","title":"LibAwsAuth.aws_signing_complete_fn","text":"Gets called by the signing function when the signing is complete.\n\nNote that result will be destroyed after this function returns, so either copy it, or do all necessary adjustments inside the callback.\n\nWhen performing event or chunk signing, you will need to copy out the signature value in order to correctly configure the signable that wraps the event or chunk you want signed next. The signature is found in the \"signature\" property on the signing result. This value must be added as the \"previous-signature\" property on the next signable.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signing_config_aws","page":"Home","title":"LibAwsAuth.aws_signing_config_aws","text":"aws_signing_config_aws\n\nA configuration structure for use in AWS-related signing. Currently covers sigv4 only, but is not required to.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signing_config_base","page":"Home","title":"LibAwsAuth.aws_signing_config_base","text":"aws_signing_config_base\n\nAll signing configuration structs must match this by having the config_type member as the first member.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signing_config_type","page":"Home","title":"LibAwsAuth.aws_signing_config_type","text":"aws_signing_config_type\n\nA primitive RTTI indicator for signing configuration structs\n\nThere must be one entry per config structure type and it's a fatal error to put the wrong value in the \"config_type\" member of your config structure.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signing_result","page":"Home","title":"LibAwsAuth.aws_signing_result","text":"aws_signing_result\n\nA structure for tracking all the signer-requested changes to a signable. Interpreting these changes is signing-algorithm specific.\n\nA signing result consists of\n\n(1) Properties - A set of key-value pairs (2) Property Lists - A set of named key-value pair lists\n\nThe hope is that these two generic structures are enough to model the changes required by any generic message-signing algorithm.\n\nNote that the key-value pairs of a signing_result are different types (but same intent) as the key-value pairs in the signable interface. This is because the signing result stands alone and owns its own copies of all values, whereas a signable can wrap an existing object and thus use non-owning references (like byte cursors) if appropriate to its implementation.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_signing_result_property","page":"Home","title":"LibAwsAuth.aws_signing_result_property","text":"aws_signing_result_property\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsAuth.aws_apply_signing_result_to_http_request-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_apply_signing_result_to_http_request","text":"aws_apply_signing_result_to_http_request(request, allocator, result)\n\nDocumentation not found.\n\nPrototype\n\nint aws_apply_signing_result_to_http_request( struct aws_http_message *request, struct aws_allocator *allocator, const struct aws_signing_result *result);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_auth_library_clean_up-Tuple{}","page":"Home","title":"LibAwsAuth.aws_auth_library_clean_up","text":"aws_auth_library_clean_up()\n\nClean up internal datastructures used by aws-c-auth. Must not be called until application is done using functionality in aws-c-auth.\n\nPrototype\n\nvoid aws_auth_library_clean_up(void);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_auth_library_init-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_auth_library_init","text":"aws_auth_library_init(allocator)\n\nInitializes internal datastructures used by aws-c-auth. Must be called before using any functionality in aws-c-auth.\n\nArguments\n\nallocator: memory allocator to use for any module-level memory allocation\n\nPrototype\n\nvoid aws_auth_library_init(struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_acquire-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_acquire","text":"aws_credentials_acquire(credentials)\n\nAdd a reference to some credentials\n\nArguments\n\ncredentials: credentials to increment the ref count on\n\nPrototype\n\nvoid aws_credentials_acquire(const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_get_access_key_id-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_get_access_key_id","text":"aws_credentials_get_access_key_id(credentials)\n\nGet the AWS access key id from a set of credentials\n\nArguments\n\ncredentials: credentials to get the access key id from\n\nReturns\n\na byte cursor to the access key id\n\nPrototype\n\nstruct aws_byte_cursor aws_credentials_get_access_key_id(const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_get_ecc_key_pair-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_get_ecc_key_pair","text":"aws_credentials_get_ecc_key_pair(credentials)\n\nGet the elliptic curve key associated with this set of credentials\n\nArguments\n\ncredentials: credentials to get the the elliptic curve key for\n\nReturns\n\nthe elliptic curve key associated with the credentials, or NULL if no key is associated with these credentials\n\nPrototype\n\nstruct aws_ecc_key_pair *aws_credentials_get_ecc_key_pair(const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_get_expiration_timepoint_seconds-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_get_expiration_timepoint_seconds","text":"aws_credentials_get_expiration_timepoint_seconds(credentials)\n\nGet the expiration timepoint (in seconds since epoch) associated with a set of credentials\n\nArguments\n\ncredentials: credentials to get the expiration timepoint for\n\nReturns\n\nthe time, in seconds since epoch, the credentials will expire; UINT64_MAX for credentials without a specific expiration time\n\nPrototype\n\nuint64_t aws_credentials_get_expiration_timepoint_seconds(const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_get_secret_access_key-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_get_secret_access_key","text":"aws_credentials_get_secret_access_key(credentials)\n\nGet the AWS secret access key from a set of credentials\n\nArguments\n\ncredentials: credentials to get the secret access key from\n\nReturns\n\na byte cursor to the secret access key\n\nPrototype\n\nstruct aws_byte_cursor aws_credentials_get_secret_access_key(const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_get_session_token-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_get_session_token","text":"aws_credentials_get_session_token(credentials)\n\nGet the AWS session token from a set of credentials\n\nArguments\n\ncredentials: credentials to get the session token from\n\nReturns\n\na byte cursor to the session token or an empty byte cursor if there is no session token\n\nPrototype\n\nstruct aws_byte_cursor aws_credentials_get_session_token(const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_is_anonymous-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_is_anonymous","text":"aws_credentials_is_anonymous(credentials)\n\nIf credentials are anonymous, then the signing process is skipped.\n\nArguments\n\ncredentials: credentials to check\n\nReturns\n\ntrue if the credentials are anonymous; false otherwise.\n\nPrototype\n\nbool aws_credentials_is_anonymous(const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_new-NTuple{5, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_new","text":"aws_credentials_new(allocator, access_key_id_cursor, secret_access_key_cursor, session_token_cursor, expiration_timepoint_seconds)\n\nCreates a new set of aws credentials\n\nArguments\n\nallocator: memory allocator to use\naccess_key_id_cursor: value for the aws access key id field\nsecret_access_key_cursor: value for the secret access key field\nsession_token_cursor: (optional) security token associated with the credentials\nexpiration_timepoint_seconds: timepoint, in seconds since epoch, that the credentials will no longer be valid past. For credentials that do not expire, use UINT64_MAX\n\nReturns\n\na valid credentials object, or NULL\n\nPrototype\n\nstruct aws_credentials *aws_credentials_new( struct aws_allocator *allocator, struct aws_byte_cursor access_key_id_cursor, struct aws_byte_cursor secret_access_key_cursor, struct aws_byte_cursor session_token_cursor, uint64_t expiration_timepoint_seconds);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_new_anonymous-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_new_anonymous","text":"aws_credentials_new_anonymous(allocator)\n\nCreates a new set of aws anonymous credentials. Use Anonymous credentials, when you want to skip the signing process.\n\nArguments\n\nallocator: memory allocator to use\n\nReturns\n\na valid credentials object, or NULL\n\nPrototype\n\nstruct aws_credentials *aws_credentials_new_anonymous(struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_new_ecc-NTuple{5, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_new_ecc","text":"aws_credentials_new_ecc(allocator, access_key_id, ecc_key, session_token, expiration_timepoint_in_seconds)\n\nCreates a set of AWS credentials that includes an ECC key pair. These credentials do not have a value for the secret access key; the ecc key takes over that field's role in sigv4a signing.\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\naccess_key_id: access key id for the credential set\necc_key: ecc key to use during signing when using these credentials\nsession_token: (optional) session token associated with the credentials\nexpiration_timepoint_in_seconds: (optional) if session-based, time at which these credentials expire\n\nReturns\n\na new pair of AWS credentials, or NULL\n\nPrototype\n\nstruct aws_credentials *aws_credentials_new_ecc( struct aws_allocator *allocator, struct aws_byte_cursor access_key_id, struct aws_ecc_key_pair *ecc_key, struct aws_byte_cursor session_token, uint64_t expiration_timepoint_in_seconds);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_new_ecc_from_aws_credentials-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_new_ecc_from_aws_credentials","text":"aws_credentials_new_ecc_from_aws_credentials(allocator, credentials)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_credentials *aws_credentials_new_ecc_from_aws_credentials( struct aws_allocator *allocator, const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_new_from_string-NTuple{5, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_new_from_string","text":"aws_credentials_new_from_string(allocator, access_key_id, secret_access_key, session_token, expiration_timepoint_seconds)\n\nCreates a new set of AWS credentials\n\nArguments\n\nallocator: memory allocator to use\naccess_key_id: value for the aws access key id field\nsecret_access_key: value for the secret access key field\nsession_token: (optional) security token associated with the credentials\nexpiration_timepoint_seconds: timepoint, in seconds since epoch, that the credentials will no longer be valid past. For credentials that do not expire, use UINT64_MAX\n\nReturns\n\na valid credentials object, or NULL\n\nPrototype\n\nstruct aws_credentials *aws_credentials_new_from_string( struct aws_allocator *allocator, const struct aws_string *access_key_id, const struct aws_string *secret_access_key, const struct aws_string *session_token, uint64_t expiration_timepoint_seconds);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_acquire-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_acquire","text":"aws_credentials_provider_acquire(provider)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_acquire(struct aws_credentials_provider *provider);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_get_credentials-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_get_credentials","text":"aws_credentials_provider_get_credentials(provider, callback, user_data)\n\nDocumentation not found.\n\nPrototype\n\nint aws_credentials_provider_get_credentials( struct aws_credentials_provider *provider, aws_on_get_credentials_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_anonymous-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_anonymous","text":"aws_credentials_provider_new_anonymous(allocator, shutdown_options)\n\nCreates a simple anonymous credentials provider\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\nshutdown_options: an optional shutdown callback that gets invoked when the resources used by the provider are no longer in use.\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_anonymous( struct aws_allocator *allocator, const struct aws_credentials_provider_shutdown_options *shutdown_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_cached-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_cached","text":"aws_credentials_provider_new_cached(allocator, options)\n\nCreates a provider that functions as a caching decorating of another provider.\n\nFor example, the default chain is implemented as:\n\nCachedProvider -> ProviderChain(EnvironmentProvider -> ProfileProvider -> ECS/EC2IMD etc...)\n\nA reference is taken on the target provider\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_cached( struct aws_allocator *allocator, const struct aws_credentials_provider_cached_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_chain-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_chain","text":"aws_credentials_provider_new_chain(allocator, options)\n\nCreates a provider that sources credentials from an ordered sequence of providers, with the overall result being from the first provider to return a valid set of credentials\n\nReferences are taken on all supplied providers\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_chain( struct aws_allocator *allocator, const struct aws_credentials_provider_chain_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_chain_default-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_chain_default","text":"aws_credentials_provider_new_chain_default(allocator, options)\n\nCreates the default provider chain used by most AWS SDKs.\n\nGenerally:\n\n(1) Environment (2) Profile (3) STS web identity (4) (conditional, off by default) ECS (5) (conditional, on by default) EC2 Instance Metadata\n\nSupport for environmental control of the default provider chain is not yet implemented.\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_chain_default( struct aws_allocator *allocator, const struct aws_credentials_provider_chain_default_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_cognito-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_cognito","text":"aws_credentials_provider_new_cognito(allocator, options)\n\nCreates a provider that sources credentials from the Cognito-Identity service via an invocation of the GetCredentialsForIdentity API call.\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_cognito( struct aws_allocator *allocator, const struct aws_credentials_provider_cognito_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_cognito_caching-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_cognito_caching","text":"aws_credentials_provider_new_cognito_caching(allocator, options)\n\nCreates a cognito-based provider that has a caching layer wrapped around it\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: cognito-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_cognito_caching( struct aws_allocator *allocator, const struct aws_credentials_provider_cognito_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_delegate-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_delegate","text":"aws_credentials_provider_new_delegate(allocator, options)\n\nCreate a credentials provider depends on provided vtable to fetch the credentials.\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_delegate( struct aws_allocator *allocator, const struct aws_credentials_provider_delegate_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_ecs-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_ecs","text":"aws_credentials_provider_new_ecs(allocator, options)\n\nCreates a provider that sources credentials from the ecs role credentials service\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_ecs( struct aws_allocator *allocator, const struct aws_credentials_provider_ecs_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_environment-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_environment","text":"aws_credentials_provider_new_environment(allocator, options)\n\nCreates a provider that returns credentials sourced from the environment variables:\n\nAWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_environment( struct aws_allocator *allocator, const struct aws_credentials_provider_environment_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_imds-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_imds","text":"aws_credentials_provider_new_imds(allocator, options)\n\nCreates a provider that sources credentials from the ec2 instance metadata service\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_imds( struct aws_allocator *allocator, const struct aws_credentials_provider_imds_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_process-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_process","text":"aws_credentials_provider_new_process(allocator, options)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_process( struct aws_allocator *allocator, const struct aws_credentials_provider_process_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_profile-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_profile","text":"aws_credentials_provider_new_profile(allocator, options)\n\nCreates a provider that sources credentials from key-value profiles loaded from the aws credentials file (\"~/.aws/credentials\" by default) and the aws config file (\"~/.aws/config\" by default)\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_profile( struct aws_allocator *allocator, const struct aws_credentials_provider_profile_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_sso-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_sso","text":"aws_credentials_provider_new_sso(allocator, options)\n\nCreates a provider that sources credentials from SSO using a SSOToken.\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_sso( struct aws_allocator *allocator, const struct aws_credentials_provider_sso_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_static-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_static","text":"aws_credentials_provider_new_static(allocator, options)\n\nCreates a simple provider that just returns a fixed set of credentials\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_static( struct aws_allocator *allocator, const struct aws_credentials_provider_static_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_sts-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_sts","text":"aws_credentials_provider_new_sts(allocator, options)\n\nCreates a provider that assumes an IAM role via. STS AssumeRole() API. This provider will fetch new credentials upon each call to aws_credentials_provider_get_credentials().\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_sts( struct aws_allocator *allocator, const struct aws_credentials_provider_sts_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_sts_web_identity-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_sts_web_identity","text":"aws_credentials_provider_new_sts_web_identity(allocator, options)\n\nCreates a provider that sources credentials from STS using AssumeRoleWithWebIdentity\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_sts_web_identity( struct aws_allocator *allocator, const struct aws_credentials_provider_sts_web_identity_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_new_x509-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_new_x509","text":"aws_credentials_provider_new_x509(allocator, options)\n\nCreates a provider that sources credentials from IoT Core\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\noptions: provider-specific configuration options\n\nReturns\n\nthe newly-constructed credentials provider, or NULL if an error occurred.\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_new_x509( struct aws_allocator *allocator, const struct aws_credentials_provider_x509_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_provider_release-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_provider_release","text":"aws_credentials_provider_release(provider)\n\nRelease a reference to a credentials provider\n\nArguments\n\nprovider: provider to decrement the ref count on\n\nPrototype\n\nstruct aws_credentials_provider *aws_credentials_provider_release(struct aws_credentials_provider *provider);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_credentials_release-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_credentials_release","text":"aws_credentials_release(credentials)\n\nRemove a reference to some credentials\n\nArguments\n\ncredentials: credentials to decrement the ref count on\n\nPrototype\n\nvoid aws_credentials_release(const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_ecc_key_pair_new_ecdsa_p256_key_from_aws_credentials-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_ecc_key_pair_new_ecdsa_p256_key_from_aws_credentials","text":"aws_ecc_key_pair_new_ecdsa_p256_key_from_aws_credentials(allocator, credentials)\n\nDerives an ecc key pair (based on the nist P256 curve) from the access key id and secret access key components of a set of AWS credentials using an internal key derivation specification. Used to perform sigv4a signing in the hybrid mode based on AWS credentials.\n\nArguments\n\nallocator: memory allocator to use for all memory allocation\ncredentials: AWS credentials to derive the ECC key from using the AWS sigv4a key deriviation specification\n\nReturns\n\na new ecc key pair or NULL on failure\n\nPrototype\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_ecdsa_p256_key_from_aws_credentials( struct aws_allocator *allocator, const struct aws_credentials *credentials);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_acquire-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_acquire","text":"aws_imds_client_acquire(client)\n\nIncrements the ref count on the client\n\nArguments\n\nclient: imds client to acquire a reference to\n\nPrototype\n\nvoid aws_imds_client_acquire(struct aws_imds_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_ami_id-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_ami_id","text":"aws_imds_client_get_ami_id(client, callback, user_data)\n\nGets the ami id of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_ami_id( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_ami_launch_index-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_ami_launch_index","text":"aws_imds_client_get_ami_launch_index(client, callback, user_data)\n\nGets the ami launch index of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_ami_launch_index( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_ami_manifest_path-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_ami_manifest_path","text":"aws_imds_client_get_ami_manifest_path(client, callback, user_data)\n\nGets the ami manifest path of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_ami_manifest_path( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_ancestor_ami_ids-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_ancestor_ami_ids","text":"aws_imds_client_get_ancestor_ami_ids(client, callback, user_data)\n\nGets the list of ancestor ami ids of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_ancestor_ami_ids( struct aws_imds_client *client, aws_imds_client_on_get_array_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_attached_iam_role-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_attached_iam_role","text":"aws_imds_client_get_attached_iam_role(client, callback, user_data)\n\nGets the attached iam role of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_attached_iam_role( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_availability_zone-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_availability_zone","text":"aws_imds_client_get_availability_zone(client, callback, user_data)\n\nGets the availability zone of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_availability_zone( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_block_device_mapping-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_block_device_mapping","text":"aws_imds_client_get_block_device_mapping(client, callback, user_data)\n\nGets the list of block device mappings of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_block_device_mapping( struct aws_imds_client *client, aws_imds_client_on_get_array_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_credentials-NTuple{4, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_credentials","text":"aws_imds_client_get_credentials(client, iam_role_name, callback, user_data)\n\nGets temporary credentials based on the attached iam role of the ec2 instance\n\nArguments\n\nclient: imds client to use for the query\niam_role_name: iam role name to get temporary credentials through\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_credentials( struct aws_imds_client *client, struct aws_byte_cursor iam_role_name, aws_imds_client_on_get_credentials_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_iam_profile-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_iam_profile","text":"aws_imds_client_get_iam_profile(client, callback, user_data)\n\nGets the iam profile information of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_iam_profile( struct aws_imds_client *client, aws_imds_client_on_get_iam_profile_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_instance_action-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_instance_action","text":"aws_imds_client_get_instance_action(client, callback, user_data)\n\nGets the instance-action of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_instance_action( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_instance_id-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_instance_id","text":"aws_imds_client_get_instance_id(client, callback, user_data)\n\nGets the instance id of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_instance_id( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_instance_info-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_instance_info","text":"aws_imds_client_get_instance_info(client, callback, user_data)\n\nGets the instance information data block of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_instance_info( struct aws_imds_client *client, aws_imds_client_on_get_instance_info_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_instance_signature-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_instance_signature","text":"aws_imds_client_get_instance_signature(client, callback, user_data)\n\nGets the signature of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_instance_signature( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_instance_type-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_instance_type","text":"aws_imds_client_get_instance_type(client, callback, user_data)\n\nGets the instance type of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_instance_type( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_mac_address-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_mac_address","text":"aws_imds_client_get_mac_address(client, callback, user_data)\n\nGets the mac address of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_mac_address( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_private_ip_address-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_private_ip_address","text":"aws_imds_client_get_private_ip_address(client, callback, user_data)\n\nGets the private ip address of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_private_ip_address( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_product_codes-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_product_codes","text":"aws_imds_client_get_product_codes(client, callback, user_data)\n\nGets the product codes of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_product_codes( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_public_key-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_public_key","text":"aws_imds_client_get_public_key(client, callback, user_data)\n\nGets the public key of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_public_key( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_ramdisk_id-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_ramdisk_id","text":"aws_imds_client_get_ramdisk_id(client, callback, user_data)\n\nGets the ramdisk id of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_ramdisk_id( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_reservation_id-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_reservation_id","text":"aws_imds_client_get_reservation_id(client, callback, user_data)\n\nGets the reservation id of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_reservation_id( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_resource_async-NTuple{4, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_resource_async","text":"aws_imds_client_get_resource_async(client, resource_path, callback, user_data)\n\nQueries a generic resource (string) from the ec2 instance metadata document\n\nArguments\n\nclient: imds client to use for the query\nresource_path: path of the resource to query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_resource_async( struct aws_imds_client *client, struct aws_byte_cursor resource_path, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_security_groups-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_security_groups","text":"aws_imds_client_get_security_groups(client, callback, user_data)\n\nGets the list of the security groups of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_security_groups( struct aws_imds_client *client, aws_imds_client_on_get_array_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_get_user_data-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_get_user_data","text":"aws_imds_client_get_user_data(client, callback, user_data)\n\nGets the user data of the ec2 instance from the instance metadata document\n\nArguments\n\nclient: imds client to use for the query\ncallback: callback function to invoke on query success or failure\nuser_data: opaque data to invoke the completion callback with\n\nReturns\n\nAWS_OP_SUCCESS if the query was successfully started, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_imds_client_get_user_data( struct aws_imds_client *client, aws_imds_client_on_get_resource_callback_fn callback, void *user_data);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_new-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_new","text":"aws_imds_client_new(allocator, options)\n\nCreates a new imds client\n\nArguments\n\nallocator: memory allocator to use for creation and queries\noptions: configuration options for the imds client\n\nReturns\n\na newly-constructed imds client, or NULL on failure\n\nPrototype\n\nstruct aws_imds_client *aws_imds_client_new( struct aws_allocator *allocator, const struct aws_imds_client_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_imds_client_release-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_imds_client_release","text":"aws_imds_client_release(client)\n\nDecrements the ref count on the client\n\nArguments\n\nclient: imds client to release a reference to\n\nPrototype\n\nvoid aws_imds_client_release(struct aws_imds_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_sign_request_aws-NTuple{5, Any}","page":"Home","title":"LibAwsAuth.aws_sign_request_aws","text":"aws_sign_request_aws(allocator, signable, base_config, on_complete, userdata)\n\n(Asynchronous) entry point to sign something (a request, a chunk, an event) with an AWS signing process. Depending on the configuration, the signing process may or may not complete synchronously.\n\nArguments\n\nallocator: memory allocator to use throughout the signing process\nsignable: the thing to be signed. See signable.h for common constructors for signables that wrap different types.\nbase_config: pointer to a signing configuration, currently this must be of type aws_signing_config_aws\non_complete: completion callback to be invoked when signing has finished\nuser_data: opaque user data that will be passed to the completion callback\n\nReturns\n\nAWS_OP_SUCCESS if the signing attempt was initiated successfully, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_sign_request_aws( struct aws_allocator *allocator, const struct aws_signable *signable, const struct aws_signing_config_base *base_config, aws_signing_complete_fn *on_complete, void *userdata);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signable_destroy-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_signable_destroy","text":"aws_signable_destroy(signable)\n\nCleans up and frees all resources associated with a signable instance\n\nArguments\n\nsignable: signable object to destroy\n\nPrototype\n\nvoid aws_signable_destroy(struct aws_signable *signable);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signable_get_payload_stream-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_signable_get_payload_stream","text":"aws_signable_get_payload_stream(signable, out_input_stream)\n\nRetrieves the signable's message payload as a stream.\n\nArguments\n\nsignable: signable to get the payload of\nout_input_stream: output parameter for the payload stream\n\nReturns\n\nAWS_OP_SUCCESS if successful, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_signable_get_payload_stream(const struct aws_signable *signable, struct aws_input_stream **out_input_stream);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signable_get_property-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_signable_get_property","text":"aws_signable_get_property(signable, name, out_value)\n\nRetrieves a property (key-value pair) from a signable. Global property name constants are included below.\n\nArguments\n\nsignable: signable object to retrieve a property from\nname: name of the property to query\nout_value: output parameter for the property's value\n\nReturns\n\nAWS_OP_SUCCESS if the property was successfully fetched, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_signable_get_property( const struct aws_signable *signable, const struct aws_string *name, struct aws_byte_cursor *out_value);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signable_get_property_list-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_signable_get_property_list","text":"aws_signable_get_property_list(signable, name, out_property_list)\n\nRetrieves a named property list (list of key-value pairs) from a signable. Global property list name constants are included below.\n\nArguments\n\nsignable: signable object to retrieve a property list from\nname: name of the property list to fetch\nout_property_list: output parameter for the fetched property list\n\nReturns\n\nAWS_OP_SUCCESS if the property list was successfully fetched, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_signable_get_property_list( const struct aws_signable *signable, const struct aws_string *name, struct aws_array_list **out_property_list);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signable_new_canonical_request-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_signable_new_canonical_request","text":"aws_signable_new_canonical_request(allocator, canonical_request)\n\nCreates a signable that represents a pre-computed canonical request from an http request\n\nArguments\n\nallocator: memory allocator use to create the signable\ncanonical_request: text of the canonical request\n\nReturns\n\nthe new signable object, or NULL if failure\n\nPrototype\n\nstruct aws_signable *aws_signable_new_canonical_request( struct aws_allocator *allocator, struct aws_byte_cursor canonical_request);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signable_new_chunk-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_signable_new_chunk","text":"aws_signable_new_chunk(allocator, chunk_data, previous_signature)\n\nCreates a signable that represents a unit of chunked encoding within an http request. This can also be used for Transcribe event signing with encoded payload as chunk_data.\n\nArguments\n\nallocator: memory allocator use to create the signable\nchunk_data: stream representing the data in the chunk; it should be in its final, encoded form\nprevious_signature: the signature computed in the most recent signing that preceded this one. It can be found by copying the \"signature\" property from the signing_result of that most recent signing.\n\nReturns\n\nthe new signable object, or NULL if failure\n\nPrototype\n\nstruct aws_signable *aws_signable_new_chunk( struct aws_allocator *allocator, struct aws_input_stream *chunk_data, struct aws_byte_cursor previous_signature);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signable_new_http_request-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_signable_new_http_request","text":"aws_signable_new_http_request(allocator, request)\n\nCreates a signable wrapper around an http request.\n\nArguments\n\nallocator: memory allocator to use to create the signable\nrequest: http request to create a signable for\n\nReturns\n\nthe new signable object, or NULL if failure\n\nPrototype\n\nstruct aws_signable *aws_signable_new_http_request(struct aws_allocator *allocator, struct aws_http_message *request);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signable_new_trailing_headers-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_signable_new_trailing_headers","text":"aws_signable_new_trailing_headers(allocator, trailing_headers, previous_signature)\n\nCreates a signable wrapper around a set of headers.\n\nArguments\n\nallocator: memory allocator use to create the signable\ntrailing_headers: http headers to create a signable for\nprevious_signature: the signature computed in the most recent signing that preceded this one. It can be found by copying the \"signature\" property from the signing_result of that most recent signing.\n\nReturns\n\nthe new signable object, or NULL if failure\n\nPrototype\n\nstruct aws_signable *aws_signable_new_trailing_headers( struct aws_allocator *allocator, struct aws_http_headers *trailing_headers, struct aws_byte_cursor previous_signature);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signing_algorithm_to_string-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_signing_algorithm_to_string","text":"aws_signing_algorithm_to_string(algorithm)\n\nReturns a c-string that describes the supplied signing algorithm\n\nArguments\n\nalgorithm: signing algorithm to get a friendly string name for\n\nReturns\n\nfriendly string name of the supplied algorithm, or \"Unknown\" if the algorithm is not recognized\n\nPrototype\n\nconst char *aws_signing_algorithm_to_string(enum aws_signing_algorithm algorithm);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signing_result_append_property_list-NTuple{4, Any}","page":"Home","title":"LibAwsAuth.aws_signing_result_append_property_list","text":"aws_signing_result_append_property_list(result, list_name, property_name, property_value)\n\nAdds a key-value pair to a named property list. If the named list does not yet exist, it will be created as an empty list before the pair is added. No uniqueness checks are made against existing pairs.\n\nArguments\n\nresult: signing result to modify\nlist_name: name of the list to add the property key-value pair to\nproperty_name: key value of the key-value pair to append\nproperty_value: property value of the key-value pair to append\n\nReturns\n\nAWS_OP_SUCCESS if the operation was successful, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_signing_result_append_property_list( struct aws_signing_result *result, const struct aws_string *list_name, const struct aws_byte_cursor *property_name, const struct aws_byte_cursor *property_value);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signing_result_clean_up-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_signing_result_clean_up","text":"aws_signing_result_clean_up(result)\n\nClean up all resources held by the signing result\n\nArguments\n\nresult: signing result to clean up resources for\n\nPrototype\n\nvoid aws_signing_result_clean_up(struct aws_signing_result *result);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signing_result_get_property-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_signing_result_get_property","text":"aws_signing_result_get_property(result, property_name, out_property_value)\n\nGets the value of a property on a signing result\n\nArguments\n\nresult: signing result to query from\nproperty_name: name of the property to query the value of\nout_property_value: output parameter for the property value\n\nReturns\n\nAWS_OP_SUCCESS if the get was successful, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_signing_result_get_property( const struct aws_signing_result *result, const struct aws_string *property_name, struct aws_string **out_property_value);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signing_result_get_property_list-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_signing_result_get_property_list","text":"aws_signing_result_get_property_list(result, list_name, out_list)\n\nGets a named property list on the signing result. If the list does not exist, *out_list will be set to null\n\nArguments\n\nresult: signing result to query\nlist_name: name of the list of key-value pairs to get\nout_list: output parameter for the list of key-value pairs\n\nPrototype\n\nvoid aws_signing_result_get_property_list( const struct aws_signing_result *result, const struct aws_string *list_name, struct aws_array_list **out_list);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signing_result_get_property_value_in_property_list-NTuple{4, Any}","page":"Home","title":"LibAwsAuth.aws_signing_result_get_property_value_in_property_list","text":"aws_signing_result_get_property_value_in_property_list(result, list_name, property_name, out_value)\n\nLooks for a property within a named property list on the signing result. If the list does not exist, or the property does not exist within the list, *out_value will be set to NULL.\n\nArguments\n\nresult: signing result to query\nlist_name: name of the list of key-value pairs to search through for the property\nproperty_name: name of the property to search for within the list\nout_value: output parameter for the property value, if found\n\nPrototype\n\nvoid aws_signing_result_get_property_value_in_property_list( const struct aws_signing_result *result, const struct aws_string *list_name, const struct aws_string *property_name, struct aws_string **out_value);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signing_result_init-Tuple{Any, Any}","page":"Home","title":"LibAwsAuth.aws_signing_result_init","text":"aws_signing_result_init(result, allocator)\n\nInitialize a signing result to its starting state\n\nArguments\n\nresult: signing result to initialize\nallocator: allocator to use for all memory allocation\n\nReturns\n\nAWS_OP_SUCCESS if initialization was successful, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_signing_result_init(struct aws_signing_result *result, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_signing_result_set_property-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsAuth.aws_signing_result_set_property","text":"aws_signing_result_set_property(result, property_name, property_value)\n\nSets the value of a property on a signing result\n\nArguments\n\nresult: signing result to modify\nproperty_name: name of the property to set\nproperty_value: value that the property should assume\n\nReturns\n\nAWS_OP_SUCCESS if the set was successful, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_signing_result_set_property( struct aws_signing_result *result, const struct aws_string *property_name, const struct aws_byte_cursor *property_value);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_trim_padded_sigv4a_signature-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_trim_padded_sigv4a_signature","text":"aws_trim_padded_sigv4a_signature(signature)\n\nRemoves any padding added to the end of a sigv4a signature. Signature must be hex-encoded.\n\nArguments\n\nsignature: signature to remove padding from\n\nReturns\n\ncursor that ranges over only the valid hex encoding of the sigv4a signature\n\nPrototype\n\nstruct aws_byte_cursor aws_trim_padded_sigv4a_signature(struct aws_byte_cursor signature);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_validate_aws_signing_config_aws-Tuple{Any}","page":"Home","title":"LibAwsAuth.aws_validate_aws_signing_config_aws","text":"aws_validate_aws_signing_config_aws(config)\n\nChecks a signing configuration for invalid settings combinations.\n\nArguments\n\nconfig: signing configuration to validate\n\nReturns\n\nAWS_OP_SUCCESS if the configuration is valid, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_validate_aws_signing_config_aws(const struct aws_signing_config_aws *config);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_validate_v4a_authorization_value-NTuple{4, Any}","page":"Home","title":"LibAwsAuth.aws_validate_v4a_authorization_value","text":"aws_validate_v4a_authorization_value(allocator, ecc_key, string_to_sign_cursor, signature_value_cursor)\n\nAnother helper function to check a computed sigv4a signature.\n\nPrototype\n\nint aws_validate_v4a_authorization_value( struct aws_allocator *allocator, struct aws_ecc_key_pair *ecc_key, struct aws_byte_cursor string_to_sign_cursor, struct aws_byte_cursor signature_value_cursor);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsAuth.aws_verify_sigv4a_signing-NTuple{7, Any}","page":"Home","title":"LibAwsAuth.aws_verify_sigv4a_signing","text":"aws_verify_sigv4a_signing(allocator, signable, base_config, expected_canonical_request_cursor, signature_cursor, ecc_key_pub_x, ecc_key_pub_y)\n\nTest-only API used for cross-library signing verification tests\n\nVerifies: (1) The canonical request generated during sigv4a signing of the request matches what is passed in (2) The signature passed in is a valid ECDSA signature of the hashed string-to-sign derived from the canonical request\n\nArguments\n\nallocator: memory allocator to use throughout the signing verification process\nsignable: the thing to be signed. See signable.h for common constructors for signables that wrap different types.\nbase_config: pointer to a signing configuration, currently this must be of type aws_signing_config_aws\nexpected_canonical_request_cursor: expected result when building the canonical request\nsignature_cursor: the actual signature computed from a previous signing of the signable\necc_key_pub_x: the x coordinate of the public part of the ecc key to verify the signature\necc_key_pub_y: the y coordinate of the public part of the ecc key to verify the signature\n\nReturns\n\nAWS_OP_SUCCESS if the signing attempt was initiated successfully, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_verify_sigv4a_signing( struct aws_allocator *allocator, const struct aws_signable *signable, const struct aws_signing_config_base *base_config, struct aws_byte_cursor expected_canonical_request_cursor, struct aws_byte_cursor signature_cursor, struct aws_byte_cursor ecc_key_pub_x, struct aws_byte_cursor ecc_key_pub_y);\n\n\n\n\n\n","category":"method"}]
}
